#Область ПрограммныйИнтерфейс

Процедура ПередВсемиТестами() Экспорт
	ЮТест.Контекст().УстановитьЗначение("Контрагент", НовыйКонтрагент());
	ЮТест.Контекст().УстановитьЗначение("Валюта", НоваяВалюта());
	ЮТест.Контекст().УстановитьЗначение("Товар", НовыйТовар());
	ЮТест.Контекст().УстановитьЗначение("Склад", НовыйСклад());
КонецПроцедуры

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты.ДобавитьТестовыйНабор("Проверка движения товара").ВТранзакции()
		.ДобавитьТест("ПриходЗаписьПозитив")
		.ДобавитьТест("ПриходПроведениеПозитив")
		.ДобавитьТест("РасходЗаписьПозитив")
		.ДобавитьТест("РасходПроведениеПозитив")
		.ДобавитьТест("РасходПроведениеНегатив")
		.ДобавитьТест("ПроверкаСверткиРегистра")
	;
	
КонецПроцедуры

Функция ПриходЗаписьПозитив() Экспорт

	НовыйКонтрагент = ЮТест.Контекст().Значение("Контрагент");
	НовыйТовар = ЮТест.Контекст().Значение("Товар");
	НовыйСклад = ЮТест.Контекст().Значение("Склад");
	НоваяВалюта = ЮТест.Контекст().Значение("Валюта");
		
	Цена = 100;
	Количество = 3;
	Сумма = 300;
	
	// Создание прихода
	КоличествоДокументов = 3;
	Итератор = 0;
	
	Пока Итератор < КоличествоДокументов Цикл
	
		Итератор = Итератор + 1;
		
		КонструкторПрихода = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
			.ФикцияОбязательныхПолей()
			.ФикцияРеквизитов("Организация")
			.Установить("Дата", НачалоДня(ТекущаяДатаСеанса()))
			.Установить("Поставщик", НовыйКонтрагент)
			.Установить("Склад", НовыйСклад)
			.Установить("Валюта", НоваяВалюта)
			.ТабличнаяЧасть("Товары").ДобавитьСтроку()
				.Установить("Товар", НовыйТовар)
				.Установить("Цена", Цена)
				.Установить("Количество", Количество)
				.Установить("Сумма", Сумма)
			;
		
		ЮТест.ОжидаетЧто(КонструкторПрихода)
			.Метод("Записать")
			.НеВыбрасываетИсключение()
			;
			
	КонецЦикла;
	
КонецФункции

Функция ПриходПроведениеПозитив() Экспорт

	НовыйТовар = ЮТест.Контекст().Значение("Товар");
	НовыйСклад = ЮТест.Контекст().Значение("Склад");
	НоваяВалюта = ЮТест.Контекст().Значение("Валюта");
		
	Цена = 100;
	Количество = 3;
	Сумма = 300;
	
	// Создание прихода
	КоличествоДокументов = 3;
	ДокументыПрихода = Новый Массив;
	Итератор = 0;
	
	Пока Итератор < КоличествоДокументов Цикл
	
		Итератор = Итератор + 1;
		
		КонструкторПрихода = ЮТест.Данные().КонструкторОбъекта("Документы.ПриходТовара")
			.ФикцияОбязательныхПолей()
			.ФикцияРеквизитов("Поставщик, Организация")
			.Установить("Дата", НачалоДня(ТекущаяДатаСеанса()))
			.Установить("Склад", НовыйСклад)
			.Установить("Валюта", НоваяВалюта)
			.ТабличнаяЧасть("Товары").ДобавитьСтроку()
				.Установить("Товар", НовыйТовар)
				.Установить("Цена", Цена)
				.Установить("Количество", Количество)
				.Установить("Сумма", Сумма)
			.Записать()
			;
		
		ЮТест.ОжидаетЧто(КонструкторПрихода.ПолучитьОбъект())
			.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)
			.НеВыбрасываетИсключение()
			;
			
		ДвиженияВзаиморасчеты = ЮТЗапросы.ДвиженияДокумента(КонструкторПрихода, "Взаиморасчеты");
		ЮТест.ОжидаетЧто(ДвиженияВзаиморасчеты)
			.Заполнено()
			;
			
		ДвиженияТоварныеЗапасы = ЮТЗапросы.ДвиженияДокумента(КонструкторПрихода, "ТоварныеЗапасы");
		ЮТест.ОжидаетЧто(ДвиженияТоварныеЗапасы)
			.Заполнено()
			;

	КонецЦикла;
	
КонецФункции

Процедура РасходЗаписьПозитив() Экспорт

	НовыйКонтрагент = ЮТест.Контекст().Значение("Контрагент");
	НовыйТовар = ЮТест.Контекст().Значение("Товар");
	НовыйСклад = ЮТест.Контекст().Значение("Склад");
	НоваяВалюта = ЮТест.Контекст().Значение("Валюта");
		
	Цена = 100;
	Количество = 3;
	Сумма = 300;
	
	// Создание расхода
	КоличествоДокументов = 3;
	Итератор = 0;
	
	Пока Итератор < КоличествоДокументов Цикл
	
		Итератор = Итератор + 1;
		
		РасходТовара = ЮТест.Данные().КонструкторОбъекта("Документы.РасходТовара")
			.ФикцияОбязательныхПолей()
			.Установить("Дата", ТекущаяДатаСеанса())
			.Установить("Склад", НовыйСклад)
			.Установить("Валюта", НоваяВалюта)
			.Установить("Покупатель", НовыйКонтрагент)
			.ФикцияРеквизитов("Организация, ВидЦен, ОбоснованиеОтгрузки")
			.ТабличнаяЧасть("Товары").ДобавитьСтроку()
				.Установить("Товар", НовыйТовар)
				.Установить("Цена", Цена)
				.Установить("Количество", Количество)
				.Установить("Сумма", Сумма)
			.Записать()
			;
			
		ЮТест.ОжидаетЧто(РасходТовара.ПолучитьОбъект())
			.Метод("Записать")
			.НеВыбрасываетИсключение()
			;
		КонецЦикла;
		
КонецПроцедуры

Процедура РасходПроведениеПозитив() Экспорт

	НовыйКонтрагент = ЮТест.Контекст().Значение("Контрагент");
	НовыйТовар = ЮТест.Контекст().Значение("Товар");
	НовыйСклад = ЮТест.Контекст().Значение("Склад");
	НоваяВалюта = ЮТест.Контекст().Значение("Валюта");
		
	Цена = 100;
	Количество = 3;
	Сумма = 300;
	
	ПриходПроведениеПозитив();
	
	// Создание расхода
	КоличествоДокументов = 3;
	Итератор = 0;
	
	Пока Итератор < КоличествоДокументов Цикл
	
		Итератор = Итератор + 1;
		
		РасходТовара = ЮТест.Данные().КонструкторОбъекта("Документы.РасходТовара")
			.ФикцияОбязательныхПолей()
			.Установить("Дата", ТекущаяДатаСеанса())
			.Установить("Склад", НовыйСклад)
			.Установить("Валюта", НоваяВалюта)
			.Установить("Покупатель", НовыйКонтрагент)
			.ФикцияРеквизитов("Организация, ВидЦен, ОбоснованиеОтгрузки")
			.ТабличнаяЧасть("Товары").ДобавитьСтроку()
				.Установить("Товар", НовыйТовар)
				.Установить("Цена", Цена)
				.Установить("Количество", Количество)
				.Установить("Сумма", Сумма)
			.Записать()
			;
			
		ЮТест.ОжидаетЧто(РасходТовара.ПолучитьОбъект())
			.Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный))
			.НеВыбрасываетИсключение()
			;
			
		ДвиженияВзаиморасчеты = ЮТЗапросы.ДвиженияДокумента(РасходТовара, "Взаиморасчеты");
		ЮТест.ОжидаетЧто(ДвиженияВзаиморасчеты)
			.Заполнено()
			;
			
		ДвиженияТоварныеЗапасы = ЮТЗапросы.ДвиженияДокумента(РасходТовара, "ТоварныеЗапасы");
		ЮТест.ОжидаетЧто(ДвиженияТоварныеЗапасы).
			Заполнено()
			;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура РасходПроведениеНегатив() Экспорт

	НовыйКонтрагент = ЮТест.Контекст().Значение("Контрагент");
	НовыйТовар = ЮТест.Контекст().Значение("Товар");
	НовыйСклад = ЮТест.Контекст().Значение("Склад");
	НоваяВалюта = ЮТест.Контекст().Значение("Валюта");
		
	Цена = 100;
	Количество = 3;
	Сумма = 300;
	
	// Создание расхода
	РасходТовара = ЮТест.Данные().КонструкторОбъекта("Документы.РасходТовара")
		.ФикцияОбязательныхПолей()
		.Установить("Дата", ТекущаяДатаСеанса())
		.Установить("Склад", НовыйСклад)
		.Установить("Валюта", НоваяВалюта)
		.Установить("Покупатель", НовыйКонтрагент)
		.ФикцияРеквизитов("Организация, ВидЦен, ОбоснованиеОтгрузки")
		.ТабличнаяЧасть("Товары").ДобавитьСтроку()
			.Установить("Товар", НовыйТовар)
			.Установить("Цена", Цена)
			.Установить("Количество", Количество * 100)
			.Установить("Сумма", Сумма)
		.Записать()
		;
		
	ЮТест.ОжидаетЧто(РасходТовара.ПолучитьОбъект())
		.Метод("Записать", ЮТМетоды.МассивПараметров(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный))
		.ВыбрасываетИсключение("Не удалось провести ""Продажа")
		;
		
	Сообщения = ПолучитьСообщенияПользователю();
	ЮТест.ОжидаетЧто(Сообщения)
		.ИмеетТип("ФиксированныйМассив")
		.ИмеетДлину(1)
		.Свойство("[0].Текст")
			.ИмеетТип("Строка")
			.Содержит("Не хватает")
		;
		
КонецПроцедуры

Процедура ПроверкаСверткиРегистра() Экспорт
	
	НовыйКонтрагент = ЮТест.Контекст().Значение("Контрагент");
	НовыйТовар = ЮТест.Контекст().Значение("Товар");
	НовыйСклад = ЮТест.Контекст().Значение("Склад");
	НоваяВалюта = ЮТест.Контекст().Значение("Валюта");
	
	РасходПроведениеПозитив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыОстатки.Контрагент КАК Контрагент,
		|	ВзаиморасчетыОстатки.Валюта КАК Валюта
		|ИЗ
		|	РегистрНакопления.Взаиморасчеты.Остатки(
		|			,
		|			Валюта = &Валюта
		|				И Контрагент = &Контрагент) КАК ВзаиморасчетыОстатки";
	
	Запрос.УстановитьПараметр("Валюта", НоваяВалюта);
	Запрос.УстановитьПараметр("Контрагент", НовыйКонтрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЮТест.ОжидаетЧто(РезультатЗапроса.Пустой());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварныеЗапасыОстатки.Товар КАК Товар,
		|	ТоварныеЗапасыОстатки.Склад КАК Склад
		|ИЗ
		|	РегистрНакопления.ТоварныеЗапасы.Остатки(
		|			,
		|			Склад = &Склад
		|				И Товар = &Товар) КАК ТоварныеЗапасыОстатки";
	
	Запрос.УстановитьПараметр("Склад", НовыйСклад);
	Запрос.УстановитьПараметр("Товар", НовыйТовар);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЮТест.ОжидаетЧто(РезультатЗапроса.Пустой());
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйКонтрагент()
	
	КонструкторКонтрагента = ЮТест.Данные().КонструкторОбъекта("Справочники.Контрагенты")
		.ФикцияОбязательныхПолей()
		;
	НовыйКонтрагент = КонструкторКонтрагента.Записать();
	
	Возврат НовыйКонтрагент;

КонецФункции

Функция НоваяВалюта()
	
	КонструкторВалюты = ЮТест.Данные().КонструкторОбъекта("Справочники.Валюты")
		.ФикцияОбязательныхПолей()
		;
	НоваяВалюта = КонструкторВалюты.Записать();
	
	Возврат НоваяВалюта;

КонецФункции

Функция НовыйТовар()
	
	КонструкторТовара = ЮТест.Данные().КонструкторОбъекта("Справочники.Товары")
		.ФикцияОбязательныхПолей()
		.Установить("Вид", Перечисления.ВидыТоваров.Товар)
		;
	НовыйТовар = КонструкторТовара.Записать();
	
	Возврат НовыйТовар;

КонецФункции

Функция НовыйСклад()
	
	КонструкторСклада = ЮТест.Данные().КонструкторОбъекта("Справочники.Склады")
		.ФикцияОбязательныхПолей()
		.Установить("НеИспользовать", Ложь)
		;
	НовыйСклад = КонструкторСклада.Записать();
	
	Возврат НовыйСклад;

КонецФункции

#КонецОбласти